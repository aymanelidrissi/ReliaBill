generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  company      Company?
}

model Company {
  id         String   @id @default(cuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  legalName  String
  vat        String
  iban       String
  street     String   @default("")
  city       String   @default("")
  postalCode String   @default("")
  country    String   @default("BE")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  clients  Client[]
  invoices Invoice[]
  counters InvoiceCounter[]
}

model Client {
  id         String   @id @default(cuid())
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name       String
  vat        String?
  email      String?
  street     String   @default("")
  city       String   @default("")
  postalCode String   @default("")
  country    String   @default("BE")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  peppolScheme String?      @default("iso6523-actorid-upis")
  peppolId     String?
  deliveryMode DeliveryMode @default(PEPPOL)

  invoices Invoice[]

  @@index([companyId, name])
  @@index([companyId, peppolId])
}

enum DeliveryMode {
  PEPPOL
  HERMES
}

enum InvoiceStatus {
  DRAFT
  READY
  SENT
  DELIVERED
  FAILED
}

model Invoice {
  id              String        @id @default(cuid())
  companyId       String
  company         Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  clientId        String?
  client          Client?       @relation(fields: [clientId], references: [id], onDelete: SetNull)
  number          String
  issueDate       DateTime
  dueDate         DateTime
  currency        String        @default("EUR")
  totalExcl       Decimal       @default(0) @db.Decimal(12, 2)
  totalVat        Decimal       @default(0) @db.Decimal(12, 2)
  totalIncl       Decimal       @default(0) @db.Decimal(12, 2)
  status          InvoiceStatus @default(DRAFT)
  xmlPath         String?
  pdfPath         String?
  hermesMessageId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  lines InvoiceLine[]
  logs  DeliveryLog[]

  @@unique([companyId, number])
  @@index([companyId, issueDate])
}

model InvoiceLine {
  id            String   @id @default(cuid())
  invoiceId     String
  invoice       Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  description   String
  quantity      Decimal  @default(1) @db.Decimal(10, 2)
  unitPrice     Decimal  @default(0) @db.Decimal(12, 2)
  vatRate       Decimal  @default(0) @db.Decimal(4, 2)
  lineTotalExcl Decimal  @default(0) @db.Decimal(12, 2)
  lineVat       Decimal  @default(0) @db.Decimal(12, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model DeliveryLog {
  id        String   @id @default(cuid())
  invoiceId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  timestamp DateTime @default(now())
  status    String
  message   String?
  provider  String   @default("hermes")
  createdAt DateTime @default(now())
}

model InvoiceCounter {
  companyId String
  year      Int
  seq       Int    @default(0)

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([companyId, year])
}
