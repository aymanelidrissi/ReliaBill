// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// ───────────────────────────────────────────────────────────
//  Prisma schema – ReliaBill - Ayman El Idrissi
// ───────────────────────────────────────────────────────────

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//ENUMS
enum Role {
  admin
  staff
  accountant
}

enum InvoiceStatus {
  draft
  sent
  delivered
  paid
  overdue
  void
}

enum Direction {
  OUTBOUND
  INBOUND
}

enum DeliveryChan {
  peppol
  hermes
  email
}

enum PayMethod {
  stripe
  cash
  banktransfer
  sepa
}

enum DeliveryStatus {
  queued
  sent
  delivered
  failed
}

enum AuditAction {
  INSERT
  UPDATE
  DELETE
  LOGIN
}

//TENANCY
model Organization {
  id        String     @id @default(uuid())
  name      String
  vat       String?    @unique
  country   String     @db.Char(2)
  logoUrl   String?
  users     User[]
  customers Customer[]
  invoices  Invoice[]
  createdAt DateTime   @default(now())
}

//USERS & SESSIONS
model User {
  id        String       @id @default(uuid())
  email     String       @unique
  password  String
  role      Role         @default(staff)
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id])
  sessions  Session[]
  createdAt DateTime     @default(now())
  Invoice   Invoice[]
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
  sessionToken String   @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

//CRM
model Customer {
  id        String       @id @default(uuid())
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id])
  name      String
  vat       String?
  email     String?
  address   String?
  country   String?      @db.Char(2)
  currency  String       @default("EUR") @db.Char(3)
  invoices  Invoice[]
  createdAt DateTime     @default(now())
}

//INVOICING
model Invoice {
  id           String           @id @default(uuid())
  orgId        String
  org          Organization     @relation(fields: [orgId], references: [id])
  userId       String
  user         User             @relation(fields: [userId], references: [id])
  customerId   String
  customer     Customer         @relation(fields: [customerId], references: [id])
  direction    Direction        @default(OUTBOUND)
  number       Int
  status       InvoiceStatus    @default(draft)
  currency     String           @default("EUR") @db.Char(3)
  issuedAt     DateTime
  dueAt        DateTime
  subtotal     Decimal          @db.Decimal(18, 2)
  taxTotal     Decimal          @db.Decimal(18, 2)
  total        Decimal          @db.Decimal(18, 2)
  subtotalEur  Decimal?         @db.Decimal(18, 2)
  totalEur     Decimal?         @db.Decimal(18, 2)
  fxRate       Decimal?         @db.Decimal(18, 6)
  peppolXmlUrl String?
  pdfUrl       String?
  stripeLinkId String?
  lines        InvoiceLine[]
  payments     Payment[]
  deliveries   PeppolDelivery[]
  notes        InvoiceNote[]
  createdAt    DateTime         @default(now())

  @@unique([orgId, number])
}

model InvoiceLine {
  id          String  @id @default(uuid())
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  description String
  qty         Decimal @db.Decimal(12, 2)
  unitPrice   Decimal @db.Decimal(18, 2)
  taxRate     Decimal @default(0)
  lineTotal   Decimal @db.Decimal(18, 2)
}

model InvoiceNote {
  id        String   @id @default(uuid())
  invoiceId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  text      String
  createdAt DateTime @default(now())
}

model Payment {
  id          String    @id @default(uuid())
  invoiceId   String
  invoice     Invoice   @relation(fields: [invoiceId], references: [id])
  amount      Decimal   @db.Decimal(18, 2)
  currency    String    @db.Char(3)
  method      PayMethod
  providerRef String?
  paidAt      DateTime
}

model PeppolDelivery {
  id          String         @id @default(uuid())
  invoiceId   String
  invoice     Invoice        @relation(fields: [invoiceId], references: [id])
  msgId       String         @unique
  channel     DeliveryChan
  status      DeliveryStatus
  createdAt   DateTime       @default(now())
  deliveredAt DateTime?
}

//SUPPORTING TABLES
model CurrencyFX {
  day  DateTime @db.Date
  from String   @db.Char(3)
  to   String   @default("EUR") @db.Char(3)
  rate Decimal  @db.Decimal(18, 6)

  @@id([day, from, to])
}

model AuditLog {
  id        String      @id @default(uuid())
  orgId     String?
  tableName String
  rowId     String
  action    AuditAction
  diff      Json?
  userId    String?
  createdAt DateTime    @default(now())
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./schema.dbml"
}